from celery import shared_task
from typing import Dict, Any, List
from datetime import datetime, timedelta
import asyncio
from aiogram import Bot

from core.database import get_session
from core.models import User, MealPlan, DailyCheckIn, WeightLog
from core.services.nutrition_service import NutritionService
from core.services.notification_service import NotificationService
from config import settings

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
nutrition_service = NutritionService()
notification_service = NotificationService()

@shared_task
def generate_meal_plan_task(user_id: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        asyncio.run(_generate_meal_plan(user_id))
        return {"status": "success", "user_id": user_id}
    except Exception as e:
        return {"status": "error", "error": str(e)}

async def _generate_meal_plan(user_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await session.get(User, user_id)
        if not user:
            return
        
        user_data = {
            "daily_calories": user.daily_calories,
            "daily_protein": user.daily_protein,
            "daily_carbs": user.daily_carbs,
            "daily_fats": user.daily_fats,
            "meals_per_day": user.meals_per_day,
            "dietary_restrictions": user.dietary_restrictions,
            "budget": user.budget
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é
        meal_plans = await nutrition_service.generate_meal_plan(user_data, days=7)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        for plan in meal_plans:
            meal_plan = MealPlan(
                user_id=user_id,
                week_number=1,  # –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
                day_number=plan["day"],
                breakfast=plan["meals"][0],
                lunch=plan["meals"][1],
                dinner=plan["meals"][2],
                snack=plan["meals"][3] if len(plan["meals"]) > 3 else None,
                total_calories=plan["total_calories"],
                total_protein=plan["total_protein"],
                total_carbs=plan["total_carbs"],
                total_fats=plan["total_fats"],
                shopping_list=self._generate_shopping_list(plan["meals"])
            )
            session.add(meal_plan)
        
        await session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot = Bot(token=settings.BOT_TOKEN)
        await bot.send_message(
            user.telegram_id,
            "üéâ –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é –≥–æ—Ç–æ–≤!\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üìä –ú–æ–π –ø–ª–∞–Ω¬ª"
        )
        await bot.session.close()

def _generate_shopping_list(meals: List[Dict]) -> List[Dict]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ –∏–∑ –±–ª—é–¥"""
    shopping_list = {}
    
    for meal in meals:
        for ingredient in meal.get("ingredients", []):
            name = ingredient["name"]
            amount = ingredient["amount"]
            
            if name in shopping_list:
                # –°—É–º–º–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                shopping_list[name] += amount
            else:
                shopping_list[name] = amount
    
    return [{"name": k, "amount": v} for k, v in shopping_list.items()]

@shared_task
def send_morning_reminder():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    asyncio.run(_send_morning_reminders())
    return {"status": "success", "type": "morning_reminder"}

async def _send_morning_reminders():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await session.execute(
            select(User).where(
                User.status.in_(["trial", "active"])
            )
        )
        users = users.scalars().all()
        
        bot = Bot(token=settings.BOT_TOKEN)
        
        for user in users:
            try:
                await bot.send_message(
                    user.telegram_id,
                    "‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n"
                    "–ù–µ –∑–∞–±—É–¥—å:\n"
                    "‚Ä¢ –í–∑–≤–µ—Å–∏—Ç—å—Å—è –∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å\n"
                    "‚Ä¢ –í—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
                    "–ù–∞–∂–º–∏ /checkin –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —á–µ–∫-–∏–Ω–∞!"
                )
            except Exception as e:
                print(f"Error sending morning reminder to {user.telegram_id}: {e}")
        
        await bot.session.close()

@shared_task
def send_workout_reminder():
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
    asyncio.run(_send_workout_reminders())
    return {"status": "success", "type": "workout_reminder"}

async def _send_workout_reminders():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().weekday() + 1  # 1-7
        
        users = await session.execute(
            select(User).where(
                User.status.in_(["trial", "active"])
            )
        )
        users = users.scalars().all()
        
        bot = Bot(token=settings.BOT_TOKEN)
        
        for user in users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è
            if today in [1, 3, 5]:  # –ü–Ω, –°—Ä, –ü—Ç
                try:
                    await bot.send_message(
                        user.telegram_id,
                        "üí™ –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!\n\n"
                        "–°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞.\n"
                        "–í—Å–µ–≥–æ 20-30 –º–∏–Ω—É—Ç –¥–ª—è —Ç–≤–æ–µ–π —Ñ–æ—Ä–º—ã!\n\n"
                        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏ ¬´üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞¬ª –≤ –º–µ–Ω—é"
                    )
                except Exception as e:
                    print(f"Error sending workout reminder to {user.telegram_id}: {e}")
        
        await bot.session.close()

@shared_task
def send_evening_reminder():
    """–í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —á–µ–∫-–∏–Ω–µ"""
    asyncio.run(_send_evening_reminders())
    return {"status": "success", "type": "evening_reminder"}

async def _send_evening_reminders():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    async with get_session() as session:
        users = await session.execute(
            select(User).where(
                User.status.in_(["trial", "active"])
            )
        )
        users = users.scalars().all()
        
        bot = Bot(token=settings.BOT_TOKEN)
        
        for user in users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Å–µ–≥–æ–¥–Ω—è —á–µ–∫-–∏–Ω
            today_checkin = await session.execute(
                select(DailyCheckIn).where(
                    DailyCheckIn.user_id == user.id,
                    DailyCheckIn.date >= datetime.now().date()
                )
            )
            
            if not today_checkin.scalar_one_or_none():
                try:
                    await bot.send_message(
                        user.telegram_id,
                        "üåô –ö–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å?\n\n"
                        "–ù–µ –∑–∞–±—É–¥—å:\n"
                        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —É–∂–∏–Ω–∞\n"
                        "‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã\n"
                        "‚Ä¢ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n\n"
                        "–ù–∞–∂–º–∏ /checkin –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞!"
                    )
                except Exception as e:
                    print(f"Error sending evening reminder to {user.telegram_id}: {e}")
        
        await bot.session.close()

@shared_task
def check_expiring_subscriptions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    asyncio.run(_check_expiring_subscriptions())
    return {"status": "success", "type": "subscription_check"}

async def _check_expiring_subscriptions():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    async with get_session() as session:
        # –ò—â–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ —á–µ—Ä–µ–∑ 3 –¥–Ω—è
        expiry_date = datetime.now() + timedelta(days=3)
        
        users = await session.execute(
            select(User).where(
                User.status == "active",
                User.subscription_end <= expiry_date,
                User.subscription_end > datetime.now()
            )
        )
        users = users.scalars().all()
        
        bot = Bot(token=settings.BOT_TOKEN)
        
        for user in users:
            days_left = (user.subscription_end - datetime.now()).days
            
            try:
                await bot.send_message(
                    user.telegram_id,
                    f"‚ö†Ô∏è –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {days_left} –¥–Ω.\n\n"
                    "–ü—Ä–æ–¥–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å:\n"
                    "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è\n"
                    "‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
                    "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n"
                    "–ù–∞–∂–º–∏ /subscribe –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è"
                )
            except Exception as e:
                print(f"Error sending subscription reminder to {user.telegram_id}: {e}")
        
        await bot.session.close()

@shared_task
def analyze_user_progress(user_id: int = None):
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–ª–∞–Ω–∞"""
    asyncio.run(_analyze_progress(user_id))
    return {"status": "success", "type": "progress_analysis"}

async def _analyze_progress(user_id: int = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    async with get_session() as session:
        if user_id:
            users = [await session.get(User, user_id)]
        else:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = await session.execute(
                select(User).where(
                    User.status.in_(["trial", "active"])
                )
            )
            users = result.scalars().all()
        
        bot = Bot(token=settings.BOT_TOKEN)
        
        for user in users:
            if not user:
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π
            weight_logs = await session.execute(
                select(WeightLog).where(
                    WeightLog.user_id == user.id
                ).order_by(WeightLog.date.desc()).limit(7)
            )
            weight_logs = weight_logs.scalars().all()
            
            if len(weight_logs) >= 3:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ –≤–µ—Å–∞
                weights = [log.weight for log in weight_logs]
                avg_change = (weights[0] - weights[-1]) / len(weights)
                
                message = None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–ª–∏
                if user.goal == "weight_loss":
                    if avg_change < -0.2:  # –¢–µ—Ä—è–µ—Ç –±–æ–ª—å—à–µ 200–≥ –≤ –¥–µ–Ω—å
                        message = "‚ö†Ô∏è –¢—ã —Ç–µ—Ä—è–µ—à—å –≤–µ—Å —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ. –Ø —É–≤–µ–ª–∏—á—É –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100 –∫–∫–∞–ª."
                        user.daily_calories += 100
                    elif avg_change > 0.1:  # –ù–∞–±–∏—Ä–∞–µ—Ç –≤–µ—Å
                        message = "üìä –í–µ—Å –Ω–µ —Å–Ω–∏–∂–∞–µ—Ç—Å—è. –£–º–µ–Ω—å—à—É –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100 –∫–∫–∞–ª –∏ –¥–æ–±–∞–≤–ª—é –∫–∞—Ä–¥–∏–æ."
                        user.daily_calories -= 100
                    elif -0.2 <= avg_change <= -0.05:  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø–æ—Ç–µ—Ä—è
                        message = "‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
                
                elif user.goal == "muscle_gain":
                    if avg_change < 0.05:  # –ù–µ –Ω–∞–±–∏—Ä–∞–µ—Ç
                        message = "üìà –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∫–∞–ª–æ—Ä–∏–π –¥–ª—è —Ä–æ—Å—Ç–∞ –º—ã—à—Ü. –î–æ–±–∞–≤–ª—é 150 –∫–∫–∞–ª."
                        user.daily_calories += 150
                    elif avg_change > 0.3:  # –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä—ã–π –Ω–∞–±–æ—Ä
                        message = "‚ö†Ô∏è –ù–∞–±–æ—Ä –≤–µ—Å–∞ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä—ã–π. –£–º–µ–Ω—å—à—É –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100 –∫–∫–∞–ª."
                        user.daily_calories -= 100
                
                if message:
                    await session.commit()
                    
                    try:
                        await bot.send_message(user.telegram_id, message)
                    except Exception as e:
                        print(f"Error sending progress update to {user.telegram_id}: {e}")
        
        await bot.session.close()

@shared_task
def generate_weekly_meal_plans():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"""
    asyncio.run(_generate_weekly_plans())
    return {"status": "success", "type": "weekly_generation"}

async def _generate_weekly_plans():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤"""
    async with get_session() as session:
        users = await session.execute(
            select(User).where(
                User.status.in_(["trial", "active"])
            )
        )
        users = users.scalars().all()
        
        for user in users:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            generate_meal_plan_task.delay(user.id)
    
    return {"generated_for": len(users)}