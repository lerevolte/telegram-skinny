from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Optional

def get_start_keyboard(has_subscription: bool = False) -> InlineKeyboardMarkup:
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    builder = InlineKeyboardBuilder()
    
    if has_subscription:
        builder.button(text="üìä –ú–æ–π –ø–ª–∞–Ω", callback_data="my_plan")
        builder.button(text="‚úÖ –ß–µ–∫-–∏–Ω", callback_data="daily_checkin")
        builder.button(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")
        builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
    else:
        builder.button(text="üöÄ –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (7 –¥–Ω–µ–π)", callback_data="start_trial")
        builder.button(text="üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")
    
    builder.button(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")
    builder.adjust(1)
    
    return builder.as_markup()

def get_subscription_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="üìÖ –ú–µ—Å—è—Ü ‚Äî 1 290 ‚ÇΩ", callback_data="pay_monthly")
    builder.button(text="üìÖ 3 –º–µ—Å—è—Ü–∞ ‚Äî 3 490 ‚ÇΩ (-20%)", callback_data="pay_quarterly")
    builder.button(text="üìÖ –ì–æ–¥ ‚Äî 12 390 ‚ÇΩ (-20%)", callback_data="pay_yearly")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")
    
    builder.adjust(1)
    return builder.as_markup()

def get_gender_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="üë® –ú—É–∂—Å–∫–æ–π", callback_data="male")
    builder.button(text="üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="female")
    
    builder.adjust(2)
    return builder.as_markup()

def get_activity_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="ü™ë –°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏", callback_data="sedentary")
    builder.button(text="üö∂ –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-3 –¥–Ω—è/–Ω–µ–¥)", callback_data="light")
    builder.button(text="üèÉ –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (3-5 –¥–Ω–µ–π/–Ω–µ–¥)", callback_data="moderate")
    builder.button(text="üí™ –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (6-7 –¥–Ω–µ–π/–Ω–µ–¥)", callback_data="active")
    builder.button(text="üî• –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="very_active")
    
    builder.adjust(1)
    return builder.as_markup()

def get_goal_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="‚¨áÔ∏è –ü–æ—Ö—É–¥–µ—Ç—å", callback_data="weight_loss")
    builder.button(text="üí™ –ù–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É", callback_data="muscle_gain")
    builder.button(text="üéØ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–æ—Ä–º—É", callback_data="maintain")
    builder.button(text="‚ú® –ü–æ–¥—Ç—è–Ω—É—Ç—å —Ç–µ–ª–æ", callback_data="tone")
    
    builder.adjust(1)
    return builder.as_markup()

def get_meal_count_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="3")
    builder.button(text="4 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="4")
    builder.button(text="5 —Ä–∞–∑ –≤ –¥–µ–Ω—å", callback_data="5")
    
    builder.adjust(1)
    return builder.as_markup()

def get_restrictions_keyboard(selected: List[str] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ –ø–∏—Ç–∞–Ω–∏–∏"""
    if selected is None:
        selected = []
    
    builder = InlineKeyboardBuilder()
    
    restrictions = [
        ("ü•¨ –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ", "vegetarian"),
        ("üå± –í–µ–≥–∞–Ω—Å—Ç–≤–æ", "vegan"),
        ("ü•õ –ë–µ–∑ –ª–∞–∫—Ç–æ–∑—ã", "lactose_free"),
        ("üåæ –ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞", "gluten_free"),
        ("ü•ú –ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –æ—Ä–µ—Ö–∏", "nuts_allergy"),
        ("ü¶ê –ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã", "seafood_allergy"),
        ("üç≥ –ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ —è–π—Ü–∞", "eggs_allergy"),
        ("üçñ –ù–µ –µ–º –∫—Ä–∞—Å–Ω–æ–µ –º—è—Å–æ", "no_red_meat"),
        ("üêü –ù–µ –µ–º —Ä—ã–±—É", "no_fish"),
    ]
    
    for text, data in restrictions:
        if data in selected:
            builder.button(text=f"‚úÖ {text}", callback_data=data)
        else:
            builder.button(text=text, callback_data=data)
    
    builder.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_restrictions")
    
    builder.adjust(1)
    return builder.as_markup()

def get_morning_checkin_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —á–µ–∫-–∏–Ω–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="‚öñÔ∏è –í–≤–µ—Å—Ç–∏ –≤–µ—Å", callback_data="enter_weight")
    builder.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_weight")
    
    builder.adjust(2)
    return builder.as_markup()

def get_mood_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="üòÑ –û—Ç–ª–∏—á–Ω–æ", callback_data="mood_great")
    builder.button(text="üòä –•–æ—Ä–æ—à–æ", callback_data="mood_good")
    builder.button(text="üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ", callback_data="mood_normal")
    builder.button(text="üòî –ü–ª–æ—Ö–æ", callback_data="mood_bad")
    
    builder.adjust(2)
    return builder.as_markup()

def get_workout_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª", callback_data="workout_done")
    builder.button(text="‚è∞ –°–¥–µ–ª–∞—é –ø–æ–∑–∂–µ", callback_data="workout_later")
    builder.button(text="‚ùå –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–µ–≥–æ–¥–Ω—è", callback_data="workout_skip")
    
    builder.adjust(1)
    return builder.as_markup()

def get_meal_plan_keyboard(day: int = 1) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–Ω—è–º
    if day > 1:
        builder.button(text="‚óÄÔ∏è", callback_data=f"meal_day_{day-1}")
    
    builder.button(text=f"–î–µ–Ω—å {day}", callback_data="current_day")
    
    if day < 7:
        builder.button(text="‚ñ∂Ô∏è", callback_data=f"meal_day_{day+1}")
    
    # –î–µ–π—Å—Ç–≤–∏—è —Å –±–ª—é–¥–∞–º–∏
    builder.button(text="üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –±–ª—é–¥–æ", callback_data=f"replace_meal_{day}")
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫", callback_data="shopping_list")
    builder.button(text="üìä –ë–ñ–£ –¥–Ω—è", callback_data=f"day_macros_{day}")
    builder.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    
    builder.adjust(3, 1, 1, 1, 1)
    return builder.as_markup()

def get_replace_meal_keyboard(day: int, meal_type: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–º–µ–Ω—ã –±–ª—é–¥–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="ü•ó –ü—Ä–æ—â–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å", callback_data=f"replace_simple_{day}_{meal_type}")
    builder.button(text="üí∞ –î–µ—à–µ–≤–ª–µ", callback_data=f"replace_cheap_{day}_{meal_type}")
    builder.button(text="ü•© –ë–æ–ª—å—à–µ –±–µ–ª–∫–∞", callback_data=f"replace_protein_{day}_{meal_type}")
    builder.button(text="ü•¶ –ù–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω–æ–µ", callback_data=f"replace_lowcarb_{day}_{meal_type}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"meal_day_{day}")
    
    builder.adjust(2, 2, 1)
    return builder.as_markup()

def get_workout_keyboard(week: int = 1, day: int = 1) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data=f"start_workout_{week}_{day}")
    builder.button(text="üìπ –í–∏–¥–µ–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π", callback_data=f"workout_videos_{week}_{day}")
    builder.button(text="üîÑ –ó–∞–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data=f"replace_workout_{week}_{day}")
    builder.button(text="üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="workout_history")
    builder.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    
    builder.adjust(1)
    return builder.as_markup()

def get_payment_keyboard(amount: int, subscription_type: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø–ª–∞—Ç—ã"""
    builder = InlineKeyboardBuilder()
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è Telegram Payments
    builder.button(
        text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {amount // 100} ‚ÇΩ",
        pay=True  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    )
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="buy_subscription")
    
    builder.adjust(1)
    return builder.as_markup()