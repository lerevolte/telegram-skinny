from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
import asyncio

from states.user_states import WorkoutStates
from keyboards.inline import get_workout_keyboard
from core.services.workout_service import WorkoutService
from utils.ai_helpers import generate_workout_advice

router = Router()
workout_service = WorkoutService()

@router.message(F.text == "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
async def show_workout(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    user = await workout_service.get_user_by_telegram_id(message.from_user.id)
    
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /start")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    today_workout = await workout_service.get_today_workout(user.id)
    
    if not today_workout:
        await message.answer(
            "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞. –û—Ç–¥—ã—Ö–∞–π! üòä\n\n"
            "–°–ª–µ–¥—É—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞."
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    text = await format_workout_text(today_workout)
    
    await message.answer(
        text,
        reply_markup=get_workout_keyboard(
            week=today_workout.week_number,
            day=today_workout.day_number
        ),
        parse_mode="Markdown"
    )
    
    await state.set_state(WorkoutStates.selecting_workout)
    await state.update_data(workout_id=today_workout.id)

async def format_workout_text(workout) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    text = f"üí™ **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è**\n\n"
    text += f"–¢–∏–ø: {workout.workout_type}\n"
    text += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {workout.duration_minutes} –º–∏–Ω—É—Ç\n"
    text += f"–£—Ä–æ–≤–µ–Ω—å: {workout.difficulty}\n"
    text += f"–ö–∞–ª–æ—Ä–∏–∏: ~{workout.calories_burned} –∫–∫–∞–ª\n\n"
    
    text += "üìã **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:**\n\n"
    
    for i, exercise in enumerate(workout.exercises, 1):
        text += f"{i}. **{exercise['name']}**\n"
        
        if exercise.get('sets') and exercise.get('reps'):
            text += f"   {exercise['sets']} –ø–æ–¥—Ö–æ–¥–∞ √ó {exercise['reps']} —Ä–∞–∑\n"
        elif exercise.get('duration'):
            text += f"   {exercise['duration']} —Å–µ–∫—É–Ω–¥\n"
        
        if exercise.get('rest'):
            text += f"   –û—Ç–¥—ã—Ö: {exercise['rest']} —Å–µ–∫\n"
        
        text += "\n"
    
    return text

@router.callback_query(F.data.startswith("start_workout_"))
async def start_workout(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
    parts = callback.data.split("_")
    week = int(parts[2])
    day = int(parts[3])
    
    data = await state.get_data()
    workout_id = data.get("workout_id")
    
    await callback.message.edit_text(
        "üèÉ‚Äç‚ôÇÔ∏è –û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!\n\n"
        "–Ø –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É.\n"
        "–ì–æ—Ç–æ–≤? –ü–æ–µ—Ö–∞–ª–∏! üöÄ"
    )
    
    await state.set_state(WorkoutStates.in_progress)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    workout = await workout_service.get_workout_by_id(workout_id)
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º
    for i, exercise in enumerate(workout.exercises, 1):
        await show_exercise(callback.message, exercise, i, len(workout.exercises))
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        if exercise.get('duration'):
            await asyncio.sleep(exercise['duration'])
        else:
            # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥—Ö–æ–¥
            sets = exercise.get('sets', 3)
            reps = exercise.get('reps', 12)
            rest = exercise.get('rest', 60)
            
            exercise_time = sets * (reps * 3 + rest)  # 3 —Å–µ–∫ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
            await asyncio.sleep(min(exercise_time, 180))  # –ú–∞–∫—Å–∏–º—É–º 3 –º–∏–Ω—É—Ç—ã
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    await complete_workout(callback.message, state, workout_id)

async def show_exercise(message: Message, exercise: dict, current: int, total: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"""
    text = f"**–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {current}/{total}**\n\n"
    text += f"üéØ **{exercise['name']}**\n\n"
    
    if exercise.get('description'):
        text += f"{exercise['description']}\n\n"
    
    if exercise.get('sets') and exercise.get('reps'):
        text += f"üìä –í—ã–ø–æ–ª–Ω–∏: {exercise['sets']} √ó {exercise['reps']}\n"
    elif exercise.get('duration'):
        text += f"‚è± –í—Ä–µ–º—è: {exercise['duration']} —Å–µ–∫—É–Ω–¥\n"
    
    if exercise.get('rest'):
        text += f"üò¥ –û—Ç–¥—ã—Ö –ø–æ—Å–ª–µ: {exercise['rest']} —Å–µ–∫\n"
    
    if exercise.get('tips'):
        text += f"\nüí° –°–æ–≤–µ—Ç: {exercise['tips']}"
    
    await message.answer(text, parse_mode="Markdown")

async def complete_workout(message: Message, state: FSMContext, workout_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    await workout_service.mark_workout_completed(workout_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–∞
    user_data = await state.get_data()
    advice = await generate_workout_advice(user_data)
    
    await message.answer(
        "üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        f"{advice}\n\n"
        "–ù–µ –∑–∞–±—É–¥—å:\n"
        "‚Ä¢ –í—ã–ø–∏—Ç—å –≤–æ–¥—ã üíß\n"
        "‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Ç—è–∂–∫—É üßò\n"
        "‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å –æ—â—É—â–µ–Ω–∏—è –≤ –¥–Ω–µ–≤–Ω–∏–∫ üìù\n\n"
        "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ! üí™",
        parse_mode="Markdown"
    )
    
    await state.clear()

@router.callback_query(F.data.startswith("workout_videos_"))
async def show_workout_videos(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–µ–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube –∏–ª–∏ —Å–≤–æ–∏ –≤–∏–¥–µ–æ
    
    videos = {
        "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è": "https://youtube.com/watch?v=...",
        "–û—Ç–∂–∏–º–∞–Ω–∏—è": "https://youtube.com/watch?v=...",
        "–ü–ª–∞–Ω–∫–∞": "https://youtube.com/watch?v=...",
        "–ë–µ—Ä–ø–∏": "https://youtube.com/watch?v=...",
        "–í—ã–ø–∞–¥—ã": "https://youtube.com/watch?v=..."
    }
    
    text = "üìπ **–í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**\n\n"
    for name, url in videos.items():
        text += f"‚Ä¢ [{name}]({url})\n"
    
    text += "\nüí° –°–æ–≤–µ—Ç: –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏ —Ç–µ—Ö–Ω–∏–∫—É, –ø–æ—Ç–æ–º –≤—ã–ø–æ–ª–Ω—è–π!"
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        disable_web_page_preview=True
    )
    await callback.answer()

@router.callback_query(F.data.startswith("replace_workout_"))
async def replace_workout(callback: CallbackQuery):
    """–ó–∞–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:\n\n"
        "üèÉ‚Äç‚ôÇÔ∏è **–ö–∞—Ä–¥–∏–æ** (30 –º–∏–Ω)\n"
        "–ë–µ–≥, –≤–µ–ª–æ—Å–∏–ø–µ–¥ –∏–ª–∏ –±—ã—Å—Ç—Ä–∞—è —Ö–æ–¥—å–±–∞\n\n"
        "üßò **–ô–æ–≥–∞** (20 –º–∏–Ω)\n"
        "–†–∞—Å—Ç—è–∂–∫–∞ –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ\n\n"
        "üèä‚Äç‚ôÇÔ∏è **–ü–ª–∞–≤–∞–Ω–∏–µ** (30 –º–∏–Ω)\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–∞—Å—Å–µ–π–Ω—É\n\n"
        "üö∂‚Äç‚ôÇÔ∏è **–ü—Ä–æ–≥—É–ª–∫–∞** (45 –º–∏–Ω)\n"
        "–ê–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ\n\n"
        "–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ –æ—Ç–º–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ!"
    )
    await callback.answer("–í—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –æ—Ç–º–µ—Ç—å –≤ —á–µ–∫-–∏–Ω–µ", show_alert=True)

@router.callback_query(F.data == "workout_history")
async def show_workout_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    user = await workout_service.get_user_by_telegram_id(callback.from_user.id)
    
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    history = await workout_service.get_workout_history(user.id, limit=10)
    
    if not history:
        await callback.message.edit_text(
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n"
            "–ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–≥–æ–¥–Ω—è! üí™"
        )
        return
    
    text = "üìä **–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:**\n\n"
    
    for workout in history:
        date = workout.completed_at.strftime("%d.%m")
        emoji = "‚úÖ" if workout.completed else "‚è≠"
        text += f"{emoji} {date} - {workout.workout_type} ({workout.duration_minutes} –º–∏–Ω)\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_workouts = len([w for w in history if w.completed])
    total_calories = sum(w.calories_burned for w in history if w.completed)
    
    text += f"\nüìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    text += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total_workouts}\n"
    text += f"‚Ä¢ –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {total_calories} –∫–∫–∞–ª\n"
    
    await callback.message.edit_text(text, parse_mode="Markdown")
    await callback.answer()