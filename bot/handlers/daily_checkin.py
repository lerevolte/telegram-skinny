from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, PhotoSize
from aiogram.fsm.context import FSMContext
from datetime import datetime, time
import asyncio

from states.user_states import CheckInStates
from keyboards.inline import (
    get_morning_checkin_keyboard,
    get_mood_keyboard,
    get_workout_confirmation_keyboard
)
from core.services.checkin_service import CheckInService
from core.services.storage_service import StorageService
from utils.ai_helpers import analyze_food_photo

router = Router()
checkin_service = CheckInService()
storage_service = StorageService()

@router.message(F.text == "/checkin")
async def start_checkin(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —á–µ–∫-–∏–Ω–∞"""
    current_hour = datetime.now().hour
    
    if 5 <= current_hour < 12:
        # –£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω
        await message.answer(
            "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è\n"
            "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –¥–µ–Ω—å —Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–≤–æ–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.",
            reply_markup=get_morning_checkin_keyboard()
        )
        await state.set_state(CheckInStates.morning_weight)
    elif 12 <= current_hour < 18:
        # –î–Ω–µ–≤–Ω–æ–π —á–µ–∫-–∏–Ω
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–≤–æ–π –¥–µ–Ω—å?\n"
            "–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –≤–æ–¥—É –∏ –¥–≤–∏–∂–µ–Ω–∏–µ! üíß",
            reply_markup=get_workout_confirmation_keyboard()
        )
        await state.set_state(CheckInStates.day_activity)
    else:
        # –í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω
        await message.answer(
            "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! üåô\n"
            "–î–∞–≤–∞–π –ø–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥–∏ –¥–Ω—è.\n"
            "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ —É–∂–∏–Ω–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –µ–ª —Å–µ–≥–æ–¥–Ω—è."
        )
        await state.set_state(CheckInStates.evening_food)

@router.callback_query(CheckInStates.morning_weight, F.data == "enter_weight")
async def request_weight(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –≤–µ—Å–∞"""
    await callback.message.edit_text("–í–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(CheckInStates.weight_input)

@router.message(CheckInStates.weight_input)
async def process_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤–µ—Å–∞"""
    try:
        weight = float(message.text.replace(',', '.'))
        if not 30 <= weight <= 300:
            raise ValueError
        
        await state.update_data(morning_weight=weight)
        await checkin_service.log_weight(message.from_user.id, weight)
        
        await message.answer(
            f"‚úÖ –í–µ—Å –∑–∞–ø–∏—Å–∞–Ω: {weight} –∫–≥\n\n"
            "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?",
            reply_markup=get_mood_keyboard()
        )
        await state.set_state(CheckInStates.mood)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-300 –∫–≥)")

@router.callback_query(CheckInStates.mood)
async def process_mood(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    mood = callback.data.replace("mood_", "")
    await state.update_data(mood=mood)
    
    mood_responses = {
        "great": "–û—Ç–ª–∏—á–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —ç–Ω–µ—Ä–≥–∏—é –ø–æ –º–∞–∫—Å–∏–º—É–º—É! üí™",
        "good": "–•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ –¥–Ω—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üëç",
        "normal": "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É! –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ! üéØ",
        "bad": "–ë—ã–≤–∞–µ—Ç! –ì–ª–∞–≤–Ω–æ–µ - –Ω–µ —Å–¥–∞–≤–∞—Ç—å—Å—è. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ! üíö"
    }
    
    await callback.message.edit_text(
        mood_responses[mood] + "\n\n–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã —Å–ø–∞–ª?"
    )
    await state.set_state(CheckInStates.sleep_hours)

@router.message(CheckInStates.sleep_hours)
async def process_sleep(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å–æ–≤ —Å–Ω–∞"""
    try:
        sleep = float(message.text.replace(',', '.'))
        if not 0 <= sleep <= 24:
            raise ValueError
        
        await state.update_data(sleep_hours=sleep)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —á–µ–∫-–∏–Ω–∞
        data = await state.get_data()
        await checkin_service.save_morning_checkin(
            user_id=message.from_user.id,
            **data
        )
        
        sleep_advice = ""
        if sleep < 6:
            sleep_advice = "‚ö†Ô∏è –ú–∞–ª–æ —Å–Ω–∞ –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è —Å–ø–∞—Ç—å 7-9 —á–∞—Å–æ–≤."
        elif sleep > 9:
            sleep_advice = "üò¥ –ú–Ω–æ–≥–æ —Å–Ω–∞ —Ç–æ–∂–µ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –º–µ—Ç–∞–±–æ–ª–∏–∑–º."
        else:
            sleep_advice = "‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!"
        
        await message.answer(
            f"{sleep_advice}\n\n"
            "–¢–≤–æ–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≥–æ—Ç–æ–≤! –ü—Ä–æ–≤–µ—Ä—å –µ–≥–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n"
            "–ù–µ –∑–∞–±—É–¥—å –æ—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ–¥—ã! üì∏"
        )
        await state.clear()
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (0-24)")

@router.message(CheckInStates.evening_food, F.photo)
async def process_food_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –µ–¥—ã"""
    photo: PhotoSize = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ S3
    file_info = await message.bot.get_file(photo.file_id)
    photo_url = await storage_service.save_photo(
        file_info,
        f"food/{message.from_user.id}/{datetime.now().isoformat()}.jpg"
    )
    
    # –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é AI
    await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ... üîç")
    food_analysis = await analyze_food_photo(photo_url)
    
    await state.update_data(
        food_photo=photo_url,
        estimated_calories=food_analysis.get("calories", 0)
    )
    
    await message.answer(
        f"üìä –ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞:\n"
        f"‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {food_analysis.get('calories', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')} –∫–∫–∞–ª\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {food_analysis.get('protein', '?')}–≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {food_analysis.get('carbs', '?')}–≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {food_analysis.get('fats', '?')}–≥\n\n"
        f"üí° –°–æ–≤–µ—Ç: {food_analysis.get('advice', '–ü—Ä–æ–¥–æ–ª–∂–∞–π —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–∏—Ç–∞–Ω–∏–µ–º!')}"
    )
    
    await checkin_service.save_food_log(
        user_id=message.from_user.id,
        meal_type="dinner",
        **await state.get_data()
    )
    
    await message.answer("–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–µ–≥–æ–¥–Ω—è! –£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞! üåô")
    await state.clear()