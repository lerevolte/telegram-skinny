from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from typing import Dict, Any

from states.user_states import OnboardingStates
from keyboards.inline import (
    get_gender_keyboard,
    get_activity_keyboard,
    get_goal_keyboard,
    get_meal_count_keyboard,
    get_restrictions_keyboard
)
from core.services.user_service import UserService
from core.services.nutrition_service import NutritionService
from utils.validators import validate_age, validate_height, validate_weight

router = Router()
user_service = UserService()
nutrition_service = NutritionService()

@router.callback_query(OnboardingStates.gender)
async def process_gender(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    await state.update_data(gender=callback.data)
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(OnboardingStates.age)

@router.message(OnboardingStates.age)
async def process_age(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    if not validate_age(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 14 –¥–æ 100 –ª–µ—Ç)")
        return
    
    await state.update_data(age=int(message.text))
    await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:")
    await state.set_state(OnboardingStates.height)

@router.message(OnboardingStates.height)
async def process_height(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞"""
    if not validate_height(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (–æ—Ç 120 –¥–æ 250 —Å–º)")
        return
    
    await state.update_data(height=float(message.text))
    await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:")
    await state.set_state(OnboardingStates.weight)

@router.message(OnboardingStates.weight)
async def process_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞"""
    if not validate_weight(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–æ—Ç 30 –¥–æ 300 –∫–≥)")
        return
    
    await state.update_data(weight=float(message.text))
    await message.answer("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?", reply_markup=get_goal_keyboard())
    await state.set_state(OnboardingStates.goal)

@router.callback_query(OnboardingStates.goal)
async def process_goal(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–∏"""
    await state.update_data(goal=callback.data)
    
    if callback.data in ["weight_loss", "tone"]:
        await callback.message.edit_text("–ö–∞–∫–æ–π –≤–µ—Å —Ç—ã —Ö–æ—á–µ—à—å –¥–æ—Å—Ç–∏—á—å?")
        await state.set_state(OnboardingStates.target_weight)
    else:
        await callback.message.edit_text(
            "–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?",
            reply_markup=get_activity_keyboard()
        )
        await state.set_state(OnboardingStates.activity_level)

@router.message(OnboardingStates.target_weight)
async def process_target_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞"""
    if not validate_weight(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å")
        return
    
    await state.update_data(target_weight=float(message.text))
    await message.answer(
        "–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?",
        reply_markup=get_activity_keyboard()
    )
    await state.set_state(OnboardingStates.activity_level)

@router.callback_query(OnboardingStates.activity_level)
async def process_activity(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    await state.update_data(activity_level=callback.data)
    await callback.message.edit_text(
        "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –µ—Å—Ç—å?",
        reply_markup=get_meal_count_keyboard()
    )
    await state.set_state(OnboardingStates.meals_per_day)

@router.callback_query(OnboardingStates.meals_per_day)
async def process_meals(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏"""
    await state.update_data(meals_per_day=int(callback.data))
    await callback.message.edit_text(
        "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –ø–∏—Ç–∞–Ω–∏–∏?",
        reply_markup=get_restrictions_keyboard()
    )
    await state.set_state(OnboardingStates.restrictions)

@router.callback_query(OnboardingStates.restrictions)
async def process_restrictions(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ –ø–∏—Ç–∞–Ω–∏–∏"""
    data = await state.get_data()
    restrictions = data.get("dietary_restrictions", [])
    
    if callback.data == "done_restrictions":
        await finalize_onboarding(callback.message, state)
    else:
        if callback.data in restrictions:
            restrictions.remove(callback.data)
        else:
            restrictions.append(callback.data)
        
        await state.update_data(dietary_restrictions=restrictions)
        await callback.message.edit_reply_markup(
            reply_markup=get_restrictions_keyboard(selected=restrictions)
        )

async def finalize_onboarding(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞"""
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await user_service.update_user_profile(
        telegram_id=message.chat.id,
        **data
    )
    
    # –†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£
    nutrition_data = nutrition_service.calculate_nutrition(
        gender=data["gender"],
        age=data["age"],
        height=data["height"],
        weight=data["weight"],
        activity_level=data["activity_level"],
        goal=data["goal"],
        target_weight=data.get("target_weight")
    )
    
    await user_service.update_nutrition_targets(user.id, nutrition_data)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
    await message.answer(
        "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –≥–æ—Ç–æ–≤!\n\n"
        f"üìä –¢–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {nutrition_data['calories']} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {nutrition_data['protein']}–≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {nutrition_data['carbs']}–≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {nutrition_data['fats']}–≥\n\n"
        "–°–µ–π—á–∞—Å —è —Å–æ–∑–¥–∞–º –¥–ª—è —Ç–µ–±—è –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é..."
    )
    
    # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é –≤ —Ñ–æ–Ω–µ
    from workers.tasks import generate_meal_plan_task
    generate_meal_plan_task.delay(user.id)
    
    await state.clear()