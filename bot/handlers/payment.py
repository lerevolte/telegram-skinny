from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery, ContentType
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta

from config import settings
from core.services.payment_service import PaymentService
from core.services.user_service import UserService
from keyboards.inline import get_payment_keyboard, get_subscription_keyboard

router = Router()
payment_service = PaymentService()
user_service = UserService()

@router.callback_query(F.data.in_(["pay_monthly", "pay_quarterly", "pay_yearly"]))
async def process_subscription_choice(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    
    subscription_types = {
        "pay_monthly": {
            "type": "monthly",
            "amount": settings.PRICE_MONTHLY,
            "title": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü",
            "description": "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞ 30 –¥–Ω–µ–π",
            "days": 30
        },
        "pay_quarterly": {
            "type": "quarterly", 
            "amount": settings.PRICE_QUARTERLY,
            "title": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞",
            "description": "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞ 90 –¥–Ω–µ–π (—ç–∫–æ–Ω–æ–º–∏—è 20%)",
            "days": 90
        },
        "pay_yearly": {
            "type": "yearly",
            "amount": settings.PRICE_YEARLY,
            "title": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–æ–¥",
            "description": "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞ 365 –¥–Ω–µ–π (—ç–∫–æ–Ω–æ–º–∏—è 20%)",
            "days": 365
        }
    }
    
    subscription = subscription_types[callback.data]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è Telegram Payments
    prices = [
        LabeledPrice(
            label=subscription["title"],
            amount=subscription["amount"]
        )
    ]
    
    await callback.message.answer_invoice(
        title=subscription["title"],
        description=subscription["description"],
        payload=f"{subscription['type']}_{callback.from_user.id}",
        provider_token=settings.YUKASSA_TOKEN,  # –∏–ª–∏ STRIPE_TOKEN
        currency="RUB",
        prices=prices,
        start_parameter="subscription",
        photo_url="https://example.com/fitness-bot-logo.jpg",  # –õ–æ–≥–æ—Ç–∏–ø
        photo_height=512,
        photo_width=512,
        need_name=True,
        need_email=True,
        send_email_to_provider=True
    )
    
    await callback.answer()

@router.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
    payload_parts = pre_checkout_query.invoice_payload.split("_")
    subscription_type = payload_parts[0]
    user_id = int(payload_parts[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    user = await user_service.get_user(telegram_id=user_id)
    
    if not user:
        await pre_checkout_query.answer(
            ok=False,
            error_message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if user.status == "active" and user.subscription_end > datetime.utcnow():
        await pre_checkout_query.answer(
            ok=False,
            error_message="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
        )
        return
    
    # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    await pre_checkout_query.answer(ok=True)

@router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    
    payment = message.successful_payment
    payload_parts = payment.invoice_payload.split("_")
    subscription_type = payload_parts[0]
    user_id = int(payload_parts[1])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_days = {
        "monthly": 30,
        "quarterly": 90,
        "yearly": 365
    }
    
    days = subscription_days[subscription_type]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await user_service.get_user(telegram_id=user_id)
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª —Ç—Ä–∏–∞–ª, –æ—Ç–º–µ–Ω—è–µ–º –µ–≥–æ
    if user.status == "trial":
        start_date = datetime.utcnow()
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        start_date = user.subscription_end if user.subscription_end > datetime.utcnow() else datetime.utcnow()
    
    end_date = start_date + timedelta(days=days)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    await payment_service.create_payment(
        user_id=user.id,
        amount=payment.total_amount,
        currency=payment.currency,
        subscription_type=subscription_type,
        provider="telegram_payments",
        provider_payment_id=payment.telegram_payment_charge_id,
        status="succeeded"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await user_service.update_subscription(
        user_id=user.id,
        status="active",
        subscription_type=subscription_type,
        subscription_start=start_date,
        subscription_end=end_date
    )
    
    await message.answer(
        f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!\n\n"
        f"–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {end_date.strftime('%d.%m.%Y')}.\n"
        f"–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!\n\n"
        f"–ù–∞—á–Ω–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ç–≤–æ–µ–π —Ñ–æ—Ä–º–æ–π! üí™"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from keyboards.reply import get_main_menu_keyboard
    await message.answer(
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(F.data == "cancel_subscription")
async def cancel_subscription(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    
    user = await user_service.get_user(telegram_id=callback.from_user.id)
    
    if user.status != "active":
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
        return
    
    # –û—Ç–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
    await user_service.cancel_subscription(user.id)
    
    await callback.message.edit_text(
        f"–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –û–Ω–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {user.subscription_end.strftime('%d.%m.%Y')}.\n\n"
        "–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç!",
        reply_markup=get_subscription_keyboard()
    )