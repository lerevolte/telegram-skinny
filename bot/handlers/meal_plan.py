from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from typing import Dict, Any

from states.user_states import MealPlanStates
from keyboards.inline import (
    get_meal_plan_keyboard,
    get_replace_meal_keyboard,
    get_meal_type_keyboard
)
from core.services.user_service import UserService
from core.services.nutrition_service import NutritionService
from utils.ai_helpers import generate_meal_replacement

router = Router()
user_service = UserService()
nutrition_service = NutritionService()

@router.message(F.text == "üìä –ú–æ–π –ø–ª–∞–Ω")
async def show_meal_plan(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"""
    user = await user_service.get_user(telegram_id=message.from_user.id)
    
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /start")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    meal_plans = await user_service.get_meal_plans(user.id, week=1)
    
    if not meal_plans:
        await message.answer(
            "–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–¥–æ–∂–¥–∏, —è –µ–≥–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é..."
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        from workers.tasks import generate_meal_plan_task
        generate_meal_plan_task.delay(user.id)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
    await show_day_plan(message, meal_plans[0], day=1)
    await state.set_state(MealPlanStates.viewing_day)
    await state.update_data(current_day=1, meal_plans=meal_plans)

async def show_day_plan(message: Message, meal_plan: Any, day: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
    text = f"üìÖ **–î–µ–Ω—å {day}**\n\n"
    
    # –ó–∞–≤—Ç—Ä–∞–∫
    if meal_plan.breakfast:
        text += f"üåÖ **–ó–∞–≤—Ç—Ä–∞–∫** ({meal_plan.breakfast['calories']} –∫–∫–∞–ª)\n"
        text += f"{meal_plan.breakfast['name']}\n"
        text += f"–ë: {meal_plan.breakfast['protein']}–≥ | "
        text += f"–£: {meal_plan.breakfast['carbs']}–≥ | "
        text += f"–ñ: {meal_plan.breakfast['fats']}–≥\n\n"
    
    # –û–±–µ–¥
    if meal_plan.lunch:
        text += f"‚òÄÔ∏è **–û–±–µ–¥** ({meal_plan.lunch['calories']} –∫–∫–∞–ª)\n"
        text += f"{meal_plan.lunch['name']}\n"
        text += f"–ë: {meal_plan.lunch['protein']}–≥ | "
        text += f"–£: {meal_plan.lunch['carbs']}–≥ | "
        text += f"–ñ: {meal_plan.lunch['fats']}–≥\n\n"
    
    # –£–∂–∏–Ω
    if meal_plan.dinner:
        text += f"üåô **–£–∂–∏–Ω** ({meal_plan.dinner['calories']} –∫–∫–∞–ª)\n"
        text += f"{meal_plan.dinner['name']}\n"
        text += f"–ë: {meal_plan.dinner['protein']}–≥ | "
        text += f"–£: {meal_plan.dinner['carbs']}–≥ | "
        text += f"–ñ: {meal_plan.dinner['fats']}–≥\n\n"
    
    # –ü–µ—Ä–µ–∫—É—Å
    if meal_plan.snack:
        text += f"üçé **–ü–µ—Ä–µ–∫—É—Å** ({meal_plan.snack['calories']} –∫–∫–∞–ª)\n"
        text += f"{meal_plan.snack['name']}\n\n"
    
    # –ò—Ç–æ–≥–æ
    text += f"üìä **–ò—Ç–æ–≥–æ –∑–∞ –¥–µ–Ω—å:**\n"
    text += f"–ö–∞–ª–æ—Ä–∏–∏: {meal_plan.total_calories} –∫–∫–∞–ª\n"
    text += f"–ë–µ–ª–∫–∏: {meal_plan.total_protein}–≥\n"
    text += f"–£–≥–ª–µ–≤–æ–¥—ã: {meal_plan.total_carbs}–≥\n"
    text += f"–ñ–∏—Ä—ã: {meal_plan.total_fats}–≥"
    
    await message.answer(
        text,
        reply_markup=get_meal_plan_keyboard(day),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("meal_day_"))
async def switch_day(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–Ω—è–º–∏"""
    day = int(callback.data.split("_")[2])
    data = await state.get_data()
    meal_plans = data.get("meal_plans", [])
    
    if 0 < day <= len(meal_plans):
        await show_day_plan(callback.message, meal_plans[day-1], day)
        await state.update_data(current_day=day)
        await callback.answer()
    else:
        await callback.answer("–ü–ª–∞–Ω –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤", show_alert=True)

@router.callback_query(F.data.startswith("replace_meal_"))
async def start_meal_replacement(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∑–∞–º–µ–Ω—É –±–ª—é–¥–∞"""
    day = int(callback.data.split("_")[2])
    
    await callback.message.edit_text(
        "–ö–∞–∫–æ–µ –±–ª—é–¥–æ —Ö–æ—á–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å?",
        reply_markup=get_meal_type_keyboard(day)
    )
    await state.set_state(MealPlanStates.replacing_meal)

@router.callback_query(F.data.startswith("replace_") and MealPlanStates.replacing_meal)
async def process_replacement(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–º–µ–Ω—ã –±–ª—é–¥–∞"""
    parts = callback.data.split("_")
    replacement_type = parts[1]  # simple, cheap, protein, lowcarb
    day = int(parts[2])
    meal_type = parts[3]  # breakfast, lunch, dinner, snack
    
    data = await state.get_data()
    meal_plans = data.get("meal_plans", [])
    
    if day <= len(meal_plans):
        meal_plan = meal_plans[day-1]
        current_meal = getattr(meal_plan, meal_type)
        
        if current_meal:
            await callback.message.edit_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∑–∞–º–µ–Ω—É... ‚è≥")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–º–µ–Ω—ã —á–µ—Ä–µ–∑ AI
            replacement = await generate_meal_replacement(
                current_meal,
                replacement_type
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –≤ –ë–î
            await nutrition_service.update_meal(
                meal_plan.id,
                meal_type,
                replacement
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –±–ª—é–¥–æ
            text = f"‚úÖ –ó–∞–º–µ–Ω–∞ –≥–æ—Ç–æ–≤–∞!\n\n"
            text += f"**{replacement['name']}**\n"
            text += f"–ö–∞–ª–æ—Ä–∏–∏: {replacement['calories']} –∫–∫–∞–ª\n"
            text += f"–ë: {replacement['protein']}–≥ | "
            text += f"–£: {replacement['carbs']}–≥ | "
            text += f"–ñ: {replacement['fats']}–≥\n\n"
            
            if replacement.get('ingredients'):
                text += "üìù –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n"
                for ing in replacement['ingredients']:
                    text += f"‚Ä¢ {ing}\n"
                text += "\n"
            
            if replacement.get('recipe'):
                text += f"üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç:\n{replacement['recipe']}"
            
            await callback.message.edit_text(
                text,
                reply_markup=get_meal_plan_keyboard(day),
                parse_mode="Markdown"
            )
    
    await state.set_state(MealPlanStates.viewing_day)
    await callback.answer()

@router.callback_query(F.data == "shopping_list")
async def show_shopping_list(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"""
    data = await state.get_data()
    meal_plans = data.get("meal_plans", [])
    
    if not meal_plans:
        await callback.answer("–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", show_alert=True)
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
    shopping_list = {}
    
    for plan in meal_plans:
        if plan.shopping_list:
            for item in plan.shopping_list:
                name = item['name']
                amount = item['amount']
                
                if name in shopping_list:
                    # –°—É–º–º–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    shopping_list[name] += f", {amount}"
                else:
                    shopping_list[name] = amount
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = "üõí **–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é:**\n\n"
    
    categories = {
        "–ú—è—Å–æ/–†—ã–±–∞": ["–∫—É—Ä–∏—Ü–∞", "–≥–æ–≤—è–¥–∏–Ω–∞", "—Ä—ã–±–∞", "–∏–Ω–¥–µ–π–∫–∞", "—Å–≤–∏–Ω–∏–Ω–∞"],
        "–ú–æ–ª–æ—á–Ω—ã–µ": ["–º–æ–ª–æ–∫–æ", "—Ç–≤–æ—Ä–æ–≥", "—Å—ã—Ä", "–π–æ–≥—É—Ä—Ç", "–∫–µ—Ñ–∏—Ä"],
        "–û–≤–æ—â–∏": ["–ø–æ–º–∏–¥–æ—Ä", "–æ–≥—É—Ä–µ—Ü", "–∫–∞–ø—É—Å—Ç–∞", "–º–æ—Ä–∫–æ–≤—å", "–ª—É–∫"],
        "–§—Ä—É–∫—Ç—ã": ["—è–±–ª–æ–∫–æ", "–±–∞–Ω–∞–Ω", "–∞–ø–µ–ª—å—Å–∏–Ω", "–≥—Ä—É—à–∞", "—è–≥–æ–¥—ã"],
        "–ö—Ä—É–ø—ã": ["—Ä–∏—Å", "–≥—Ä–µ—á–∫–∞", "–æ–≤—Å—è–Ω–∫–∞", "–º–∞–∫–∞—Ä–æ–Ω—ã", "—Ö–ª–µ–±"],
        "–î—Ä—É–≥–æ–µ": []
    }
    
    categorized = {cat: [] for cat in categories}
    
    for item, amount in shopping_list.items():
        added = False
        for category, keywords in categories.items():
            if any(keyword in item.lower() for keyword in keywords):
                categorized[category].append(f"‚Ä¢ {item}: {amount}")
                added = True
                break
        if not added:
            categorized["–î—Ä—É–≥–æ–µ"].append(f"‚Ä¢ {item}: {amount}")
    
    for category, items in categorized.items():
        if items:
            text += f"**{category}:**\n"
            text += "\n".join(items) + "\n\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_meal_plan_keyboard(data.get("current_day", 1)),
        parse_mode="Markdown"
    )
    await callback.answer()